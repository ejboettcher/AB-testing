{
  "hash": "81fb75ec14d6a418ee267c881848435d",
  "result": {
    "markdown": "---\ntitle: \"Power of A/B Testing\"\nsubtitle: \"Beyond user feedback\"\nbibliography: references.bib\nauthor: Evelyn J. Boettcher\nformat:\n    revealjs:\n        incremental: false\nfig-cap-location: margin\n---\n\n## A / B Testing \n\nA/B testing is a **randomized** controlled experiment. \n\n<br>\nThere are two tests: A and B, in which a single variable adjusted (B Test).\n<br>\n<br>\nThis variation, **might** affect a user's behavior.\n<br>\n\n![](./img/ab.svg)\n\n<br>\n\n### Goal: Increase End User's Objective\n\n* **Business:** Income increases >> Costs of change\n* **Health Care:**  Health increases >> Side effect\n\n:::{.notes}\n* Not explicitly telling users they are in a test\n* \"User\" is loosely used.  It could be servers, Say testing speed: Google vs AWS cloud\n\n:::\n\n---\n\n### Weekly Planner Choices\n::::{.columns}\n:::{.column width=\"15%\"}\n:::\n:::{.column width=\"35%\"}\n\n\n\n#### A\n\n![](img/CIRCA_JOTLET_WEEKLY.webp){width=200}\n\n:::\n:::{.column}\n\n#### B\n\n![](img/stamp-weekly.jpg){width=200}\n\n:::\n:::{.column width=\"15%\"}\n:::\n::::\n\n\n\n#### So why do A/B Testing\n\n::: {.incremental}\n\n- Why spend the resources to do tests\n- Why risk angering your customers with changes?\n- I got data miners, I do not need tests!\n  - I can find my answers in the data, thank you very much\n- I am a developer, I don't need to know the business side\n\n:::\n\n---\n\n### Life is complicated\n\nSubject matter experts (SME) from Microsoft, Netflixs etc, find when they implement changes \nthat only **~10%** of their ideas have the planned outcome [@sweet].\n\n<br>\nThis is because domain knowledge only gets you so far.\n<br>\n\nEven though we are isolating a single variable, \nthat variable interacts with a million other variables.\n<br>\nYou simply can not model everything or know everything.\n\n::::{.columns}\n:::{.column width=70%}\n![](./img/10_lightbulb.webp){width=90%}\n:::\n::: {.column width=30%}\n\n<br>\n<br>\n<br>\n\n::: {.incremental}\n\n- #### Implemented changes can hurt business\n:::\n:::\n::::\n\n---\n\n## Gedanken: Trader Janes has a New Pizza\n\n::::{.columns}\n:::{.column width=70%}\nSay there is a grocer called Trader Janes and it wants to add a new pizza to its line up.\n<br>\nHowever, they need to keep the same number of types it sells a constant.\nFreezer only holds N pizzas.\n\n<br>\nThey will have to remove one pizza from their lineup to add the new item.\n:::\n:::{.column width=30%}\n![](./img/yummy-pizza-1327587.jpg){width=320, align=\"right\"}\n:::\n::::\n\n\n\n::::{.columns}\n:::{.column width=70%}\n<br>\n<br>\n<br>\n<br>\n\n### Typical Work flow\n- Marketing asks a _Data Miner_ to rank popularity of pizza.\n- The Data Miner finds the pizza that sells the least.\n- Stores remove that pizza.\n:::\n:::{.column width=30%}\n![](./img/marketing.svg)\n:::\n::::\n\n<br>\n<br>\n<br>\n[Arjun Kartha's pizza pic](https://www.freeimages.com/photo/yummy-pizza-1327587)\n\n---\n\n::::{.columns}\n:::{.column width=60%}\n\n### New Pizza added!!!\n<br>\n\n\n\n#### Unfortunately:  \n\n- A week later sales go down.\n\n<br>\n<br>\n\n:::\n:::{.column width=30%}\n\n![](./img/sales_down.webp)\n\n:::\n::::\n\n### What happened?\n\n::: {.incremental}\n\n- Don't know, because the store implemented many changes that week!\n- It's the week after Thanksgiving and sales always go down that week.\n- Turns out there was a small group of heavy spenders that love this pizza.\n\n:::\n\n<br>\n<br>\n\n\n#### A / B Testing help predict what changes will increase the bottom line.\n\n---\n\n## A / B Testing Limitations\n\nA/B Testing is used to clarify a vision, but does not create vision.\n\n<br>\n\nFor example, an ophthalmologist quickly gives you a set of two choices; \n1 or 2 (2 or 3) that lead to sharpen vision.  Their test, like A/B, can not give you vision.\n\n<br>\n\n\n#### Though without a clarity, </br> a vision has serious limitation.\n\n![](./img/glasses.webp){fig-align=center width=70%}\n\n---\n\n## A/B Testing and DevOps\n\n\n::::{.columns}\n:::{.column width=25%}\n\n<br>\n<br>\n\nHow does A/B testing fit  \ninto the DevOps?\n\n<br>\n<br>\n\n\n\n* (from The Pheonix Project [@pheonix])\n\n:::\n:::{.column width=75%}\n\n### The Three Ways for DevOps \n\n**The First Way:** Principles of Flow\n\n- Making work “visible” by defining a work flow\n\n\n**The Second Way:** Principles of Feedback\n\n- Have fast and constant feedback cycles throughout all stages of a development\n- Don't throw it over the wall \n    \n    \n**Third Way:** Principles of Continuous Learning\n\n- Create a culture of continual learning and experimentation\n  \n:::\n::::\n\n![](./img/devops_ways.svg){fig-align=center width=75%}\n\n---\n\n### A/B Testing and the Three ways\n\n![](./img/devops_ways.svg){width=550px}\n\n::::{.columns}\n:::{.column width=65%}\n\n<br>\n\n\nA/B Testing is an extension of the<br> second and third ways.  \nFeedback will be the results of the A/B Testing.\n<br>\n<br>\n\n#### Experimentation happens in operations!\n\n:::\n:::{.column width=35%}\n\n![](./img/devops_ways-AB.svg)\n\n:::\n::::\n\n---\n\n## How to make an A/B Test\n\n::::{.columns}\n:::{.column}\n\n### Risks\n\n- Test cost time and money\n- What percent of risk is acceptable\n- \n\n:::\n:::{.column}\n\n### Mitigation \n\n- Minimize number of samples\n- 5% False Positive & 20% False Negative\n\n:::\n::::\n\n\n\n\n```{css echo=FALSE}\n.column {\ntext-align: center;\n}\n```\n\n::: {.column text-align=justify}\n\n### Rewards\n\n- Increased companies Goals:\n  - Business: Profits\n  - Healthcare: Health\n  - Defence: Situational Awareness\n  \n\n:::\n  \n$$\nN > 2.48 \\left( \\frac{\\sigma_\\Delta}{\\Delta} \\right)^2\n$$\n\n- $\\Delta$: How much of a difference needed to make the change\n  - Trader Janes Pizza: Sales increase by 3%\n- $\\sigma_\\Delta$: estimated by business logs\n  - $~\\sqrt{2 \\sigma_{log}^2}$\n\n---\n\n### Where does 2.48 comes from\n\n::::{.columns}\n:::{.column}\n\n- 5%: 1.64\n- 20%: 0.84\n\n1.64 + 0.84 = 2.48\n\n:::\n:::{.column}\n\n:::\n\n::::\n\n---\n\n## Rules of Thumb: 20 / 5 Rule\n\n### Assume there is no difference between A and B\n\n$\\Delta$=0\n\n<br>\n\nFalse positive incurs an explicit cost and a false negative incurs an opportunity cost\n\n::::{.columns}\n:::{.column}\n\n- $\\alpha$ == **False Positive rate** (5%: 1.64)\n\n- If $\\Delta$ << 0 so that there is 5% chance statement $\\Delta$=0, \n  - Treat B is better than A\n  \n![5percent on historgram](./img/z-score.png){width=450}\n\n:::\n:::{.column}\n\n$\\beta$== **False Negative rate** (20%: 0.84)\n<br>\n<br>\n<br>\n<br>\n\n<br>\n<br>\n![5percent on historgram](./img/z-score-20.png){width=450}\n:::\n::::\n\n---\n\n::::{.columns}\n:::{.column}\n\n- $\\alpha$ == **False Positive rate** (5%: 1.64)\n\n- If $\\Delta$ << 0 so that there is 5% chance statement $\\Delta$=0, \n  - Treat B is better than A\n  \n![5percent on historgram](./img/z-score.png){width=450}\n\n:::\n:::{.column}\n\n$\\beta$== **False Negative rat**e (20%: 0.84)\n<br>\n<br>\n<br>\n<br>\n\n<br>\n<br>\n![5percent on historgram](./img/z-score-20.png){width=450}\n:::\n::::\n\n## Quotes\n\nKnowledge discovery in databases (KDD) is the process of discovering useful knowledge from a collection of data.\n\nThe Phoenix Project Quotes Showing 1-30 of 310\n“Improving daily work is even more important than doing daily work.” [@pheonix]\n\n“until code is in production, no value is actually being generated, because it’s merely WIP stuck in the system.” [@pheonix]\n\n“every work center is made up of four things: the machine, the man, the method, and the measures.” [@pheonix]\n\n[@pheonix]\nFramework #1: The Phoenix Project/DevOps Handbook’s Three Ways\nIf you’ve read either The Phoenix Project or The DevOps Handbook, you’ve been introduced to The Three Ways framework for DevOps:\n\nThe First Way: Principles of Flow\nThe Second Way: Principles of Feedback\nThe Third Way: Principles of Continuous Learning\nThe First Way: Principles of Flow\nThe First Way is mostly concerned with accelerating the “flow” of work throughout a process. Gene Kim also refers to the First Way as Systems Thinking in his article The Three Ways: Principles Underpinning DevOps. Whether you’re calling it Flow or Systems Thinking, the principles underpinning the First Way are working toward the same end: viewing the flow of work as one continuous system (unsiloed) that can be continually refined and optimized.\n\nSome of the key principles of the First Way are:\n\nMaking work “visible”. Unlike manufacturing processes, which are easily observable on a plant floor, the flow of software through its development lifecycle is not easily seen.\nUsing methods such as Kanban boards can surface the activities going on behind the scenes, \nby showing the left-to-right movement of a user story through the development phases.\n\nLimiting work-in-progress (WIP). Keeping work-in-progress to a minimum has also been shown to accelerate work flow, because it minimizes multi-tasking and context-switching.\n\nReducing batch sizes. “Chunking” work into smaller pieces like a two-week sprint can also help deliver features (albeit smaller ones) and bug fixes to the customer faster. Issues are often caught earlier when those updates and additions are released sooner.\n\nReducing hand-offs between teams. The risk of “dropping the baton” increases as the hand-offs do. Although hand-offs can’t be completely minimized, the key is to keep the teams in tight communication with one another so that the hand-off itself is almost a non-event rather than a large ordeal with the potential for communication missteps along the way.\n\nIdentifying and removing constraints and waste. Constraints might be bottlenecks in the process, such as environments, test setup, and overly tight architecture, while waste includes things like manual work, heroics, and context-switching.\nThe Second Way: Principles of Feedback\nThe Second Way works to enable fast and constant feedback cycles throughout all stages of a development cycle.\n\nSome of the key principles of the Second Way are:\n\nSwarming and solving problems to build new knowledge. \nThis principle fits into the “fail fast” mentality, so that teams can find issues with an implementation as soon as possible and address them early and often as iterations continue.\n\nPushing quality closer to source. This principle is at the core of the DevSecOps movement, \nwhich is concerned with addressing security concerns during the development cycle, \ninstead of at the end, when rework to remediate is more difficult and costly.\n\nOptimizing for downstream work centers. \nThis principle works against the “throw it over the wall” mentality,\nby underscoring that development should be just as invested in their application being deployable, working with operations to bridge that gap (and vice versa).\nThe Third Way: Principles of Continuous Learning\nThe Third Way seeks to create a culture of continual learning and experimentation within the development organization.\n\nSome of the key principles of the Third Way are:\n\nEnabling organizational learning and a safety culture. Leaders must help “set the tone” for the organization, making it okay to learn, make mistakes, and try again.\n\nInstitutionalizing the improvement of daily work. Improving what you do and how you accomplish it should be part of everyone’s daily thinking and call to action.\n\nTransforming local discoveries to global improvements. Surfacing and sharing improvements at all levels will help enable a “bubble up” culture of continuous improvement.\n\nInjecting resilience patterns into daily work. Some examples might include rehearsing failures, and working toward improving key metrics for deployment.\n\nLeaders enforcing a learning culture. Organization-wide learning is unlikely to take hold and become pervasive unless it is sanctioned and exemplified by its leaders. So being intentional about communicating the value of learning and problem-solving is crucial to building that culture.\n\n### References\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "talk_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}